FROM nvidia/cuda:9.0-cudnn7-runtime-ubuntu16.04

MAINTAINER Zhen Liu <liuzhen2010@hotmail.com>

ARG TENSORFLOW_VERSION=1.9.0
ARG TENSORFLOW_ARCH=gpu

#RUN echo -e "\n**********************\nNVIDIA Driver Version\n**********************\n" && \
#	cat /proc/driver/nvidia/version && \
#	echo -e "\n**********************\nCUDA Version\n**********************\n" && \
#	nvcc -V && \
#	echo -e "\n\nBuilding your Deep Learning Docker Image...\n"

# Install some dependencies
RUN apt-get update && apt-get install -y \
		bc \
		build-essential \
		cmake \
		curl \
		g++ \
		gfortran \
		git \
		libffi-dev \
		libfreetype6-dev \
		libhdf5-dev \
		libjpeg-dev \
		liblcms2-dev \
		libopenblas-dev \
		liblapack-dev \
		libopenjpeg5 \
		libpng12-dev \
		libssl-dev \
		libtiff5-dev \
		libwebp-dev \
		libzmq3-dev \
		nano \
		pkg-config \
		python3-dev \
		software-properties-common \
		unzip \
		vim \
		wget \
		zlib1g-dev \
		qt5-default \
		libvtk6-dev \
		zlib1g-dev \
		libwebp-dev \
		libpng-dev \
		libtiff5-dev \
		libjasper-dev \
		libopenexr-dev \
		libgdal-dev \
		libdc1394-22-dev \
		libavcodec-dev \
		libavformat-dev \
		libswscale-dev \
		libtheora-dev \
		libvorbis-dev \
		libxvidcore-dev \
		libx264-dev \
		yasm \
		libopencore-amrnb-dev \
		libopencore-amrwb-dev \
		libv4l-dev \
		libxine2-dev \
		libtbb-dev \
		libeigen3-dev \
		python-dev \
		python-tk \
		python3-dev \
		python3-tk \
		python3-numpy \
		ant \
		default-jdk \
		doxygen \
		&& \
	apt-get clean && \
	apt-get autoremove && \
	rm -rf /var/lib/apt/lists/*

# Install pip
RUN curl -O https://bootstrap.pypa.io/get-pip.py && \
	python3 get-pip.py && \
	rm get-pip.py

# Add SNI support to Python
RUN pip3 --no-cache-dir install \
		pyopenssl \
		ndg-httpsclient \
		pyasn1

RUN pip3 --no-cache-dir install \
        h5py \
        ipykernel \
        jupyter \
	lxml \
        matplotlib \
	mpld3 \
        numpy \
        pandas \
	pillow \
        scipy \
	nose \
	scikit-image \
	sklearn \
	sympy \
        && \
    python3 -m ipykernel.kernelspec
    
# Install other useful Python packages using pip
RUN pip3 --no-cache-dir install --upgrade ipython && \
	pip3 --no-cache-dir install \
		Cython \
		path.py \
		pygments \
		six \
		sphinx \
		wheel \
		zmq 

# Install TensorFlow
RUN pip3 --no-cache-dir install \
	https://storage.googleapis.com/tensorflow/linux/${TENSORFLOW_ARCH}/tensorflow_${TENSORFLOW_ARCH}-${TENSORFLOW_VERSION}-cp35-cp35m-linux_x86_64.whl
	
# Install protoc which is needed to compile TF object detection api protos.
RUN cd /root/ && mkdir tmp && cd /root/tmp && \
    wget https://github.com/google/protobuf/releases/download/v3.4.0/protoc-3.4.0-linux-x86_64.zip && \
    unzip protoc-3.4.0-linux-x86_64.zip && \
    cp bin/protoc /usr/bin/protoc && \
    cp -r include/google /usr/local/include/ && \
    cd && rm -rf tmp
    
# Install Tensorflow object detection api
# At 07/28/2018, the api does not support well for python 3. You need to manually change several files for print syntax etc.
RUN git clone https://github.com/tensorflow/models.git /root/tf_models && \
    cd /root/tf_models/research && \
    protoc object_detection/protos/*.proto --python_out=.
    
# Install coco api which is used by some TF object detection models.
RUN git clone https://github.com/cocodataset/cocoapi.git && \
    cd /root/cocoapi/PythonAPI && make

# Install OpenCV
# Turn the opengl off so that it can use host's display to display photos.
RUN git clone --depth 1 https://github.com/opencv/opencv.git /root/opencv && \
	cd /root/opencv && \
	mkdir build && \
	cd build && \
	cmake -DWITH_OPENGL=OFF -DWITH_QT=ON -DWITH_OPENGL=ON -DFORCE_VTK=ON -DWITH_TBB=ON -DWITH_GDAL=ON -DWITH_XINE=ON -DBUILD_EXAMPLES=ON .. && \
	make -j"$(nproc)"  && \
	make install && \
	ldconfig && \
	echo 'ln /dev/null /dev/raw1394' >> ~/.bashrc

# Set up notebook config
COPY jupyter_notebook_config.py /root/.jupyter/

# Jupyter has issues with being run directly: https://github.com/ipython/ipython/issues/7062
COPY run_jupyter.sh /root/

COPY check_versions.py /root/

RUN ln -sf /usr/bin/python3 /usr/bin/python

# TF object detection api environment
RUN echo "export PYTHONPATH=$PYTHONPATH:/root/tf_models/research:/root/tf_models/research/slim" >> /root/.bashrc

# Expose Ports for TensorBoard (6006), Ipython (8888)
EXPOSE 6006 8888

WORKDIR "/root"
CMD ["/bin/bash"]
